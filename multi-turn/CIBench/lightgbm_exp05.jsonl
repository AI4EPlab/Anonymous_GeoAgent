{"prompt": "File Path: \"data/lightgbm_dataset05.csv\"\n\nLoad the dataset from the file path into a pandas DataFrame. Display the column names.\n\n", "code": "import pandas as pd\n\npath = \"data/lightgbm_dataset05.csv\"\ndf = pd.read_csv(path)\nprint(df.columns)\n", "library": ["pandas"], "exlib": ["pandas"]}
{"prompt": "\n\nSplit the data into features and target \"output\", conduct label encoder towards y label and any other non-numeric columns, then into training and testing sets with test size being 0.2.\n", "code": "from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nX = df.drop(columns=['output'], axis=1)\ny = df['output']\ny = LabelEncoder().fit_transform(y)\nX = pd.get_dummies(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n", "library": ["sklearn"], "exlib": ["sklearn"]}
{"prompt": "\n\nDefine a LightGBM model  with max_depth=4, n_estimators=120，learning_rate=0.01 and num_leaves=31. Train the model with Evaluation Metric='logloss'.\n", "code": "import lightgbm as lgb\n\nlgbm_model = lgb.LGBMClassifier(max_depth=4, n_estimators=120, learning_rate=0.01, num_leaves=31)\nlgbm_model.fit(X_train, y_train, eval_metric='logloss', eval_set=[(X_test, y_test)])\n", "library": ["LightGBM"], "exlib": ["LightGBM"]}
{"prompt": "\n\nPredict the target for the test set and Evaluate the model using the test set. Give the confusion matrix and corresponding accuracy, precision, and recall. Remember you only need to display the accuracy of the model on the test set(Keep to two decimal places).\n", "code": "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score\n\ny_pred = lgbm_model.predict(X_test)\nconf_matrix = confusion_matrix(y_test, y_pred)\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='macro')\nrecall = recall_score(y_test, y_pred, average='macro')\nround(accuracy, 2)\n", "library": ["LightGBM", "sklearn"], "exlib": ["LightGBM", "sklearn"]}
{"prompt": "\n\nGet the feature importance of each feature，print the importance of the most important feature(Keep to two decimal places).\n\n", "code": "# 获取特征重要性\nimportance = lgbm_model.feature_importances_\nfeature_names = X_train.columns\nfeature_importance = pd.DataFrame({'feature_names': feature_names, 'importance': importance})\nfeature_importance = feature_importance.sort_values(by='importance', ascending=False)\nround(feature_importance.iloc[0][1], 2)\n", "library": ["LightGBM"], "exlib": ["LightGBM"]}
{"prompt": "\n\nConduct model parameter tuning for max_depth, learning_rate, n_estimators, select three alternative values of each parameter and output the optimal value of n_estimators.\n\n", "code": "from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'max_depth': [3, 4, 5],\n    'learning_rate': [0.01, 0.05, 0.1],\n    'n_estimators': [50, 100, 150],\n}\ngrid_search = GridSearchCV(estimator=lgbm_model, param_grid=param_grid, scoring='accuracy', cv=3, verbose=1)\ngrid_search.fit(X_train, y_train)\ngrid_search.best_params_[\"n_estimators\"]\n", "library": ["sklearn"], "exlib": ["sklearn"]}
