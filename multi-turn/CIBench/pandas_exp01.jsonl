{"prompt": "File Path: `data/pandas_dataset01.csv`\n\nLoad the dataset from the file path into a pandas DataFrame using sep=\";\". Display the column names.\n\n", "code": "import pandas as pd\ndf = pd.read_csv(\"data/pandas_dataset01.csv\", sep=\";\")\ndf.columns\n", "library": ["pandas"], "exlib": ["pandas"]}
{"prompt": "\n\nCalculate and display the number of all missing values in this dataset.\n\n", "code": "sum(df.isnull().sum())\n", "library": ["pandas"], "exlib": ["pandas"]}
{"prompt": "\n\nReplace missing values in fixed acidity with the median value of the same column and then remove any remaining rows with missing values. Show the remaining total number of examples in this dataset.\n\n", "code": "df['fixed acidity'].fillna(df['fixed acidity'].median(), inplace=True)\ndf.dropna(inplace=True)\nlen(df)\n", "library": ["pandas"], "exlib": ["pandas"]}
{"prompt": "\n\nGive the data distribution of the square root of alcohol with red theme.\n\n", "code": "import seaborn as sns\nimport numpy as np\nsns.displot(np.sqrt(df['alcohol']), color='red')\n", "library": ["seaborn", "numpy"], "exlib": ["seaborn", "numpy"]}
{"prompt": "\n\n\nHow many samples have at least two outliers in \"volatile acidity\"; \"citric acid\"; \"residual sugar\" independently. Set outliner zscore greater than 2.\n\n", "code": "from scipy.stats import zscore\nfrom collections import defaultdict\n\ndef get_indices(df, column):\n    z_scores = zscore(df[column])\n    abs_z_scores = np.abs(z_scores)\n    return np.where(abs_z_scores > 2)[0]\n\ncolumn_names = [\"volatile acidity\", \"citric acid\", \"residual sugar\"]\n\n# 创建一个字典来计算每个元素出现的次数\ncounts = defaultdict(int)\nfor column in column_names:\n    indices = get_indices(df, column)\n    for item in indices:\n        counts[item] += 1\n\n# 找出出现两次及以上的元素\nduplicates = {item for item, count in counts.items() if count >= 2}\nlen(duplicates)\n", "library": ["scipy"], "exlib": ["scipy"]}
{"prompt": "\n\nGroup and aggregate data by \"quality\" and calculate the average of each numerical column. Find out how many attributes have a strict positive correlation with \"quality\".(Higher quality, higher value)\n\n", "code": "# Select only the numeric columns as df_num\ndf_num = df.select_dtypes(include=['float64', 'int64'])\ngrouped_df = df_num.groupby(\"quality\").agg(['mean'])\ncount = 0\nfor col in grouped_df.columns:\n    count += (grouped_df[col].diff().dropna() > 0).all()\ncount\n", "library": ["pandas"], "exlib": ["pandas"]}
