{"prompt": "File Path : 'data/scipy_dataset01.csv'.\n\n### Load the dataset from the file path and turn it into a pandas dataframe.  The index of the column should be named after [SepalLength, SepalWidth, PetalLength, PetalWidth, Class] in turn. Get the information of the first 5 rows of data.\n", "code": "import pandas as pd\ncsv_filename = 'data/scipy_dataset01.csv'\ndata = pd.read_csv(csv_filename, header=None, names=['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth', 'Class'])\ndata.head()\n", "library": ["pandas"], "exlib": ["pandas"]}
{"prompt": "\n\n### Compute the mean, median, variance, skewness, and kurtosis of the 2nd column 'SepalWidth'. Add all the results together and print it(rounded to two decimal places).\n", "code": "import numpy as np\nfrom scipy import stats\ncolumn_2 = data['SepalWidth']\nmean = np.mean(column_2)\nmedian = np.median(column_2)\nvariance = np.var(column_2)\nskewness = stats.skew(column_2)\nkurtosis = stats.kurtosis(column_2)\nvalue = sum([mean, median, variance, skewness, kurtosis])\nround(value,2)\n", "library": ["scipy", "numpy"], "exlib": ["scipy", "numpy"]}
{"prompt": "\n\n### Compute the Shapiro-Wilk test for the 3rd column 'PetalLength' to check for normality. Calculate the result of the Shapiro-Wilk test statistic plus the p value, print the result(rounded to two decimal places).\n", "code": "from scipy.stats import shapiro\ncolumn_3 = data[\"PetalLength\"]\nstatistic, p_value = shapiro(column_3)\nresult = statistic + p_value\nround(result,2)\n", "library": ["scipy"], "exlib": ["scipy"]}
{"prompt": "\n\n### Use the t-test to compare the difference between the 3rd column and the 4th column 'PetalWidth'. Calculate the result of the t-statistic plus p-value, print the result (rounded to two decimal places).\n", "code": "from scipy.stats import ttest_ind\ncolumn_4 = data[\"PetalWidth\"]\nt_statistic, p_value = ttest_ind(column_3, column_4)\nresult = t_statistic + p_value\nround(result,2)\n", "library": ["scipy"], "exlib": ["scipy"]}
{"prompt": "\n\n### Perform linear regression analysis on the 3th column and the 4th column. Add the slope, intercept, r_value, p_value, and standard error together and print the result (rounded to two decimal places).\n", "code": "from scipy.stats import linregress\nresult = linregress(column_3, column_4)\nvalues = sum([result.slope, result.intercept, result.rvalue, result.pvalue, result.stderr])\nround(values,2)\n", "library": ["scipy"], "exlib": ["scipy"]}
{"prompt": "\n\n### Classify all rows for the four columns \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\" into 4 clusters. Please use Kmeans algorithm. Add a column named \"Cluster\" to the dataframe and fill the column with the class to which each row belongs. Print the cluster of the data with index 15.\n", "code": "from scipy.cluster.vq import kmeans, vq\nnum_clusters = 4\ndata_for_clustering = data[[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"]]\ncentroids, _ = kmeans(data_for_clustering.values, num_clusters)\ncluster_labels, _ = vq(data_for_clustering.values, centroids)\ndata[\"Cluster\"] = cluster_labels\nprint(data.iloc[14][\"Cluster\"])\n", "library": ["scipy"], "exlib": ["scipy"]}
