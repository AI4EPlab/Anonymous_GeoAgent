{"prompt": "File Path: `data/sklearn_dataset01.csv`\n\n### Load the dataset from the file path into a pandas DataFrame. Display the column names.\n\n", "code": "import pandas as pd\ndf = pd.read_csv(\"data/sklearn_dataset01.csv\")\ndf.columns\n", "library": ["pandas"], "exlib": ["pandas"]}
{"prompt": "\n\n### Split the data into features and target \"Species\", conduct label encoder towards y label and any other non-numeric columns, then into training and testing sets with test size being 0.2.\n", "code": "from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nX = df.drop(columns=['Species'], axis=1)\ny = df['Species']\ny = LabelEncoder().fit_transform(y)\nX = pd.get_dummies(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n", "library": ["sklearn"], "exlib": ["sklearn"]}
{"prompt": "\n\n### First perform dimensionality reduction using \"PCA\" on the feature data ï¼Œthen display different categories of data in three dimensions.\n", "code": "from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\nDimensionality_Reduction = \"PCA\"\nPlot_Title = \"PCA of Iris Dataset\"\n\npca = PCA(n_components=3)\nX_pca = pca.fit_transform(X_train)\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=LabelEncoder().fit_transform(y_train))\nax.set_title(Plot_Title)\nplt.show()\n", "library": ["sklearn", "matplotlib"], "exlib": ["sklearn", "matplotlib"]}
{"prompt": "\n\n### Establish a MLP classifaction model, using optimizer \"Adam\" and activation function \"relu\". Then conduct model training for 200 epochs.\n\n", "code": "from sklearn.neural_network import MLPClassifier\n\nModel_Name = \"MLPClassifier\"\nOptimizer = \"adam\"\nActivation_Function = \"relu\"\n\nmodel = MLPClassifier(hidden_layer_sizes=(100,), max_iter=200, activation=Activation_Function, solver=Optimizer, random_state=42)\nmodel.fit(X_train, y_train)\n", "library": ["sklearn"], "exlib": ["sklearn"]}
{"prompt": "\n\n### Draw a loss curve with epoch as the horizontal axis and loss as the vertical axis.\n\n", "code": "train_accuracy = model.score(X_train, y_train)\ntest_accuracy = model.score(X_test, y_test)\n\nplt.figure(figsize=(10,6))\nplt.plot(model.loss_curve_)\nplt.title(\"Loss Curve\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()\n", "library": ["sklearn", "matplotlib"], "exlib": ["sklearn", "matplotlib"]}
{"prompt": "\n\nMake predictions on the test set, give the confusion matrix, and count the prediction accuracy, precision, recall, and F1 score of each category. Finally, display the accuracy of the model on the test set (rounded to two decimal places).\n\n", "code": "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\n\ny_pred = model.predict(X_test)\ny_true = y_test\n\nconfusion = confusion_matrix(y_true, y_pred)\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred, average=None)\nrecall = recall_score(y_true, y_pred, average=None)\nf1 = f1_score(y_true, y_pred, average=None)\n\nround(accuracy, 2)\n", "library": ["sklearn"], "exlib": ["sklearn"]}
{"prompt": "\n\nVisualize predictive data with 3D plots.\n\n", "code": "predictions = model.predict(X_test)\nX_pca_test = pca.transform(X_test)\n\nfig = plt.figure(figsize=(8,6))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(X_pca_test[:, 0], X_pca_test[:, 1], X_pca_test[:, 2], c=LabelEncoder().fit_transform(predictions))\nax.set_title(Plot_Title)\nplt.show()\n", "library": ["sklearn", "matplotlib"], "exlib": ["sklearn", "matplotlib"]}
