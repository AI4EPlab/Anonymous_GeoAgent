{"code": "import ee\nee.Initialize()\nimport geemap\nMap = geemap.Map()\n", "task": "Import the Earth Engine and geemap libraries, initialize Earth Engine, and create a Map object using geemap. This will define the variable `Map`.", "exec_path": "GEE", "context": "", "functions": ["ee.Initialize", "geemap.Map"], "external_vars": ["geemap", "ee"], "defined_vars": ["Map"], "parameters": [], "libraries": ["import geemap", "import ee"]}
{"code": "# Define the geometry for the region of interest.\ngeometry = ee.Geometry.Polygon([\n    [-56.052926888266825, -6.197669822910539],\n    [-56.05524303386028, -6.910891091940537],\n    [-55.063928517710906, -6.90030373668148],\n    [-55.08889758664213, -6.186888896354678]\n])\n", "task": "Using the Earth Engine library (ee), define a variable named `geometry` as a polygon with the following coordinates: [[-56.052926888266825, -6.197669822910539], [-56.05524303386028, -6.910891091940537], [-55.063928517710906, -6.90030373668148], [-55.08889758664213, -6.186888896354678]]", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["ee.Geometry.Polygon"], "external_vars": ["ee"], "defined_vars": ["geometry"], "parameters": ["[[-56.052926888266825, -6.197669822910539], [-56.05524303386028, -6.910891091940537], [-55.063928517710906, -6.90030373668148], [-55.08889758664213, -6.186888896354678]]"], "libraries": ["import geemap", "import ee"]}
{"code": "# Load the Sentinel-2 TOA reflectance data.\ns2 = ee.ImageCollection('COPERNICUS/S2')\n", "task": "Using the Earth Engine library (`ee`), define a variable named `s2` to represent the Sentinel-2 image collection.", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["ee.ImageCollection"], "external_vars": ["ee"], "defined_vars": ["s2"], "parameters": ["COPERNICUS/S2"], "libraries": ["import geemap", "import ee"]}
{"code": "# Define a function to mask clouds using the Sentinel-2 QA band.\ndef maskS2clouds(image):\n    \"\"\"\n    Masks clouds using the Sentinel-2 QA band.\n\n    Args:\n        image (ee.Image): The Sentinel-2 image to mask.\n\n    Returns:\n        ee.Image: The masked Sentinel-2 image.\n    \"\"\"\n\n    qa = image.select('QA60')\n\n    # Bits 10.And 11 are clouds.And cirrus, respectively.\n    cloudBitMask = ee.Number(2).pow(10).int()\n    cirrusBitMask = ee.Number(2).pow(11).int()\n\n    # Both flags should be set to zero, indicating clear conditions.\n    mask = qa.bitwiseAnd(cloudBitMask).eq(0).And(\n        qa.bitwiseAnd(cirrusBitMask).eq(0)\n    )  # binary image: 1-clear, 0-mask\n\n    # Return the masked.And scaled data (0-1).\n    return image.updateMask(mask).divide(10000)\n", "task": "Calculate the intersection between the cirrus cloud bitmask and the qa bitmask, and then use the result to mask the image. Finally, apply the cloud bitmask to the result. Store the final masked image in the variable `ee`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["image.select", "unknown_function.int", "unknown_function.pow", "ee.Number", "unknown_function.int", "unknown_function.pow", "ee.Number", "unknown_function.eq", "qa.bitwiseAnd", "unknown_function.eq", "qa.bitwiseAnd", "unknown_function.divide", "image.updateMask"], "external_vars": ["ee"], "defined_vars": ["cirrusBitMask", "cloudBitMask", "image", "mask", "qa"], "parameters": ["QA60", 10, 2, 11, 2, 0, "cloudBitMask", 0, "cirrusBitMask", 10000, "mask"], "libraries": ["import geemap", "import ee"]}
{"code": "# Map the cloud masking function over one year of data.\ns2filtered = s2.filterDate('2017-01-01', '2017-12-31') .filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', 10) .map(maskS2clouds) .select('B.*')\n\nprint(s2filtered.size())\n", "task": "Define a variable called `s2filtered` by filtering the `s2` variable to include data from 2017, filtering for a cloudy pixel percentage less than 10, applying the `maskS2clouds` function, and selecting the 'B.*' bands. Then, print the size of `s2filtered`.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Load the Sentinel-2 TOA reflectance data.\ns2 = ee.ImageCollection('COPERNICUS/S2')\n", "functions": ["unknown_function.select", "unknown_function.map", "unknown_function.filterMetadata", "s2.filterDate", "print", "s2filtered.size"], "external_vars": ["print", "maskS2clouds", "s2"], "defined_vars": ["s2filtered"], "parameters": ["B.*", "maskS2clouds", "CLOUDY_PIXEL_PERCENTAGE", "less_than", 10, "2017-01-01", "2017-12-31", "s2filtered.size()"], "libraries": ["import geemap", "import ee"]}
{"code": "# Composite the dataset.And clip into the region.\ns2_composite = s2filtered.median().clip(geometry)\n", "task": "Calculate the median value of the `s2filtered` data within the specified `geometry` and assign the result to a new variable called `s2_composite`.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Define the geometry for the region of interest.\ngeometry = ee.Geometry.Polygon([[-56.052926888266825, -6.197669822910539], [-56.05524303386028, -6.910891091940537],\n                               [-55.063928517710906, -6.90030373668148], [-55.08889758664213, -6.186888896354678]])\n# Load the Sentinel-2 TOA reflectance data.\ns2 = ee.ImageCollection('COPERNICUS/S2')\n# Map the cloud masking function over one year of data.\ns2filtered = s2.filterDate('2017-01-01', '2017-12-31').filterMetadata(\n    'CLOUDY_PIXEL_PERCENTAGE', 'less_than', 10).map(maskS2clouds).select('B.*')\n", "functions": ["unknown_function.clip", "s2filtered.median"], "external_vars": ["geometry", "s2filtered"], "defined_vars": ["s2_composite"], "parameters": ["geometry"], "libraries": ["import geemap", "import ee"]}
{"code": "# Print composite image information in the 'Console'.\nprint(s2_composite, 'sentinel2 composite')\n", "task": "Print the variable `s2_composite` with the label \"sentinel2 composite\".  You will need to define `s2_composite` before running this code.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Define the geometry for the region of interest.\ngeometry = ee.Geometry.Polygon([[-56.052926888266825, -6.197669822910539], [-56.05524303386028, -6.910891091940537],\n                               [-55.063928517710906, -6.90030373668148], [-55.08889758664213, -6.186888896354678]])\n# Load the Sentinel-2 TOA reflectance data.\ns2 = ee.ImageCollection('COPERNICUS/S2')\n# Map the cloud masking function over one year of data.\ns2filtered = s2.filterDate('2017-01-01', '2017-12-31').filterMetadata(\n    'CLOUDY_PIXEL_PERCENTAGE', 'less_than', 10).map(maskS2clouds).select('B.*')\n# Composite the dataset and clip into the region.\ns2_composite = s2filtered.median().clip(geometry)\n", "functions": ["print"], "external_vars": ["s2_composite", "print"], "defined_vars": [], "parameters": ["s2_composite", "sentinel2 composite"], "libraries": ["import geemap", "import ee"]}
{"code": "# Display the composite image.\nMap.addLayer(s2_composite, {'bands': ['B11', 'B8', 'B4'], 'min': 0, 'max': 0.3}, 'sentinel2 composite')\nMap.centerObject(geometry, 10)\n\n\n", "task": "Add a layer to the map using the `s2_composite` image, displaying bands B11, B8, and B4 with a minimum value of 0 and a maximum value of 0.3. Name the layer \"sentinel2 composite\". Then, center the map on the `geometry` object with a zoom level of 10. **Make sure to define the following variables: `Map`, `geometry`, and `s2_composite`.**", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Define the geometry for the region of interest.\ngeometry = ee.Geometry.Polygon([[-56.052926888266825, -6.197669822910539], [-56.05524303386028, -6.910891091940537],\n                               [-55.063928517710906, -6.90030373668148], [-55.08889758664213, -6.186888896354678]])\n# Load the Sentinel-2 TOA reflectance data.\ns2 = ee.ImageCollection('COPERNICUS/S2')\n# Map the cloud masking function over one year of data.\ns2filtered = s2.filterDate('2017-01-01', '2017-12-31').filterMetadata(\n    'CLOUDY_PIXEL_PERCENTAGE', 'less_than', 10).map(maskS2clouds).select('B.*')\n# Composite the dataset and clip into the region.\ns2_composite = s2filtered.median().clip(geometry)\n", "functions": ["Map.addLayer", "Map.centerObject"], "external_vars": ["geometry", "s2_composite", "Map"], "defined_vars": [], "parameters": ["s2_composite", "sentinel2 composite", "geometry", 10, "{'bands': ['B11', 'B8', 'B4'], 'min': 0, 'max': 0.3}"], "libraries": ["import geemap", "import ee"]}
