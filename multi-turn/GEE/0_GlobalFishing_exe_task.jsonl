{"code": "import ee\nee.Initialize()\nimport geemap\nMap = geemap.Map()\n", "task": "Import the Earth Engine library (`ee`) and initialize it. Then, import the `geemap` library and define a `Map` object using the `geemap.Map()` function.", "exec_path": "GEE", "context": "", "functions": ["ee.Initialize", "geemap.Map"], "external_vars": ["geemap", "ee"], "defined_vars": ["Map"], "parameters": [], "libraries": ["import geemap", "import ee"]}
{"code": "#Global Fishing\n#Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n", "task": "Using the Earth Engine library (ee), define a variable called \"gfw\" to store the GFW fishing hours data as an ImageCollection.", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["ee.ImageCollection"], "external_vars": ["ee"], "defined_vars": ["gfw"], "parameters": ["GFW/GFF/V1/fishing_hours"], "libraries": ["import geemap", "import ee"]}
{"code": "#Example 1: Total fishing effort over date range\n#Filter by \"WLD\" to get all global fishing effort rasters in 2016\nstartDate='2016-01-01'\nendDate='2017-01-01'\neffort_all = gfw.filterMetadata('country', 'equals', 'WLD').filterDate(startDate,endDate)\nprint('effort_all',effort_all)\n# Aggregate 2016 collection to single image of global fishing effort\neffort_2016 = effort_all.sum()\n#We now have a multi-band image where each band contains the total global fishing effort for that gear type. We can isolate global effort for each gear type, like trawlers, by selecting the desired image band.\n", "task": "Use the `gfw` object to filter data for the country \"WLD\" between the dates specified by `startDate` and `endDate`. Store the filtered data in a variable called `effort_all`. Print the `effort_all` variable using the `print` function. Then, calculate the sum of the `effort_all` data and store the result in a variable called `effort_2016`. You will need to define the variables: `effort_2016`, `effort_all`, `endDate`, and `startDate`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n", "functions": ["unknown_function.filterDate", "gfw.filterMetadata", "print", "effort_all.sum"], "external_vars": ["gfw", "print"], "defined_vars": ["endDate", "effort_all", "effort_2016", "startDate"], "parameters": ["startDate", "endDate", "country", "equals", "WLD", "effort_all", "effort_all"], "libraries": ["import geemap", "import ee"]}
{"code": "# Select band of global trawling effort\nall_trawling_2016 = effort_2016.select('trawlers')\n", "task": "Define a new variable called `all_trawling_2016` by selecting all rows from the `effort_2016` dataframe where the value in the \"trawlers\" column is True.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Filter by \"WLD\" to get all global fishing effort rasters in 2016\nstartDate = '2016-01-01'\nendDate = '2017-01-01'\neffort_all = gfw.filterMetadata(\n    'country', 'equals', 'WLD').filterDate(startDate, endDate)\n# Aggregate 2016 collection to single image of global fishing effort\neffort_2016 = effort_all.sum()\n", "functions": ["effort_2016.select"], "external_vars": ["effort_2016"], "defined_vars": ["all_trawling_2016"], "parameters": ["trawlers"], "libraries": ["import geemap", "import ee"]}
{"code": "# Sum bands to get total effort across gear types\neffort_all_2016 = effort_2016.reduce(ee.Reducer.sum())\n", "task": "Using the Earth Engine object `ee` and the image collection `effort_2016`, calculate the sum of all pixels in the collection and store the result in a new variable called `effort_all_2016`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Filter by \"WLD\" to get all global fishing effort rasters in 2016\nstartDate = '2016-01-01'\nendDate = '2017-01-01'\neffort_all = gfw.filterMetadata(\n    'country', 'equals', 'WLD').filterDate(startDate, endDate)\n# Aggregate 2016 collection to single image of global fishing effort\neffort_2016 = effort_all.sum()\n", "functions": ["effort_2016.reduce", "ee.Reducer.sum"], "external_vars": ["effort_2016", "ee"], "defined_vars": ["effort_all_2016"], "parameters": ["ee.Reducer.sum()"], "libraries": ["import geemap", "import ee"]}
{"code": "# Mask out pixels with no effort\neffort_all_2016 = effort_all_2016.mask(effort_all_2016.gt(0))\n# Add the total fishing effort layer\nMap.addLayer(effort_all_2016,{'palette': ['0C276C', '3B9088', 'EEFF00', 'ffffff']})\n", "task": "Assuming that the variable `effort_all_2016` is already defined and that `Map` is a global object representing a map, create a layer on the map using the `effort_all_2016` data. First, filter the data by keeping only values greater than zero using the `.mask()` method. Then, add the filtered data as a layer to the map using `Map.addLayer()`, using the specified color palette: `['0C276C', '3B9088', 'EEFF00', 'ffffff']`.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Filter by \"WLD\" to get all global fishing effort rasters in 2016\nstartDate = '2016-01-01'\nendDate = '2017-01-01'\neffort_all = gfw.filterMetadata(\n    'country', 'equals', 'WLD').filterDate(startDate, endDate)\n# Aggregate 2016 collection to single image of global fishing effort\neffort_2016 = effort_all.sum()\n# Sum bands to get total effort across gear types\neffort_all_2016 = effort_2016.reduce(ee.Reducer.sum())\n", "functions": ["effort_all_2016.mask", "effort_all_2016.gt", "Map.addLayer"], "external_vars": ["Map"], "defined_vars": ["effort_all_2016"], "parameters": [0, "effort_all_2016", "effort_all_2016.gt(0)", "{'palette': ['0C276C', '3B9088', 'EEFF00', 'ffffff']}"], "libraries": ["import geemap", "import ee"]}
{"code": "# Define a function to filter/aggregate for a specific flag state and date range\ndef flag_totals(flag, start_date, end_date):\n    effort_flag = gfw.filterMetadata('country', 'equals', flag).filterDate(start_date, end_date).sum()\n    return ee.Image(effort_flag)\n", "task": "This function calculates the total effort within a specified country and time range. The function uses the `gfw` and `ee` libraries.  It requires the following variables to be defined: \\n\\n* `flag`: Country code (e.g., \"BRA\" for Brazil)\\n* `start_date`: Start date of the time range (e.g., \"2020-01-01\")\\n* `end_date`: End date of the time range (e.g., \"2020-12-31\")\\n* `effort_flag`: Internal variable to store the sum of effort within the specified country and time range.\\n\\nThe function returns an `ee.Image` object representing the total effort.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n", "functions": ["unknown_function.sum", "unknown_function.filterDate", "gfw.filterMetadata", "ee.Image"], "external_vars": ["gfw", "ee"], "defined_vars": ["end_date", "start_date", "flag", "effort_flag"], "parameters": ["start_date", "end_date", "country", "equals", "flag", "effort_flag"], "libraries": ["import geemap", "import ee"]}
{"code": "#// Apply function to China\nchina = flag_totals('CHN','2016-01-01','2017-01-01')\n", "task": "Define a variable named `china` by calling the function `flag_totals` with arguments `'CHN'`, `'2016-01-01'`, and `'2017-01-01'`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Define a function to filter/aggregate for a specific flag state and date range\n\n\ndef flag_totals(flag, start_date, end_date):\n    effort_flag = gfw.filterMetadata(\n        'country', 'equals', flag).filterDate(start_date, end_date).sum()\n    return ee.Image(effort_flag)\n", "functions": ["flag_totals"], "external_vars": ["flag_totals"], "defined_vars": ["china"], "parameters": ["CHN", "2016-01-01", "2017-01-01"], "libraries": ["import geemap", "import ee"]}
{"code": "#// Calculate total effort across gear types\nchina_all = china.reduce(ee.Reducer.sum())\n", "task": "Using the `ee` and `china` variables, calculate the sum of all values in the `china` variable and assign it to the variable `china_all`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Define a function to filter/aggregate for a specific flag state and date range\n\n\ndef flag_totals(flag, start_date, end_date):\n    effort_flag = gfw.filterMetadata(\n        'country', 'equals', flag).filterDate(start_date, end_date).sum()\n    return ee.Image(effort_flag)\n\n\n# // Apply function to China\nchina = flag_totals('CHN', '2016-01-01', '2017-01-01')\n", "functions": ["china.reduce", "ee.Reducer.sum"], "external_vars": ["china", "ee"], "defined_vars": ["china_all"], "parameters": ["ee.Reducer.sum()"], "libraries": ["import geemap", "import ee"]}
{"code": "# Isolate drifting longline effort\nchina_drift_lines = china.select('drifting_longlines')\n", "task": "Select the data representing \"drifting_longlines\" from the variable \"china\" and assign it to a new variable named \"china_drift_lines\".", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Define a function to filter/aggregate for a specific flag state and date range\n\n\ndef flag_totals(flag, start_date, end_date):\n    effort_flag = gfw.filterMetadata(\n        'country', 'equals', flag).filterDate(start_date, end_date).sum()\n    return ee.Image(effort_flag)\n\n\n# // Apply function to China\nchina = flag_totals('CHN', '2016-01-01', '2017-01-01')\n", "functions": ["china.select"], "external_vars": ["china"], "defined_vars": ["china_drift_lines"], "parameters": ["drifting_longlines"], "libraries": ["import geemap", "import ee"]}
{"code": "#// Import the WDPA FeatureCollection and select marine protected areas\nwdpa = ee.FeatureCollection('WCMC/WDPA/current/polygons')\nmpas = wdpa.filterMetadata('MARINE', 'equals', '2')\n", "task": "Using the Earth Engine library (ee), define a variable named \"wdpa\" as a feature collection of all World Database on Protected Areas (WDPA) polygons. Then, filter the \"wdpa\" feature collection by the \"MARINE\" metadata property, selecting only those features where \"MARINE\" is equal to 2, and assign the result to a variable called \"mpas\".", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["ee.FeatureCollection", "wdpa.filterMetadata"], "external_vars": ["ee"], "defined_vars": ["wdpa", "mpas"], "parameters": ["WCMC/WDPA/current/polygons", "MARINE", "equals", "2"], "libraries": ["import geemap", "import ee"]}
{"code": "#Next, we can clip our image of 2016 global fishing effort to the bounds of all polygons in the mpas collection.\n#Clip our total effort layer to the bounds of the MPA collection\nmpa_effort_2016 = effort_all_2016.clipToCollection(mpas)\n", "task": "Define a new variable called `mpa_effort_2016` by clipping the values in the `effort_all_2016` variable to the collection of `mpas`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Filter by \"WLD\" to get all global fishing effort rasters in 2016\nstartDate = '2016-01-01'\nendDate = '2017-01-01'\neffort_all = gfw.filterMetadata(\n    'country', 'equals', 'WLD').filterDate(startDate, endDate)\n# Aggregate 2016 collection to single image of global fishing effort\neffort_2016 = effort_all.sum()\n# Sum bands to get total effort across gear types\neffort_all_2016 = effort_2016.reduce(ee.Reducer.sum())\n# Mask out pixels with no effort\neffort_all_2016 = effort_all_2016.mask(effort_all_2016.gt(0))\n# // Import the WDPA FeatureCollection and select marine protected areas\nwdpa = ee.FeatureCollection('WCMC/WDPA/current/polygons')\nmpas = wdpa.filterMetadata('MARINE', 'equals', '2')\n", "functions": ["effort_all_2016.clipToCollection"], "external_vars": ["effort_all_2016", "mpas"], "defined_vars": ["mpa_effort_2016"], "parameters": ["mpas"], "libraries": ["import geemap", "import ee"]}
{"code": "#We don’t need to mask pixels without fishing hours in our MPA layer before plotting because the effort_all_2016 layer is already masked.abs\n#Additionally, we could explore fishing in a single MPA by further filtering the mpas collection and clipping the image to the polygon.\n#Extract the PIPA polygon from the MPA collection and use it to clip our total effort layer\npipa = wdpa.filterMetadata('WDPAID', 'equals', 220201)\npipa_effort_2016 = effort_all_2016.clip(pipa.geometry())\n#Example 4: Exporting images to Google Drive\n#Define a geometry to use as the region of interest for export\nbounds = ee.Geometry.Rectangle([-179.999, -90, 180, 90], 'EPSG:4326', False)\n", "task": "Using the `ee`, `wdpa`, and `effort_all_2016` variables, filter the `wdpa` object for the feature with `WDPAID` equal to 220201 and assign it to a variable called `pipa`. Then, clip `effort_all_2016` by the geometry of `pipa` and assign the result to a variable called `pipa_effort_2016`. Finally, create a global bounding box and assign it to a variable called `bounds`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Import GFW data\ngfw = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Filter by \"WLD\" to get all global fishing effort rasters in 2016\nstartDate = '2016-01-01'\nendDate = '2017-01-01'\neffort_all = gfw.filterMetadata(\n    'country', 'equals', 'WLD').filterDate(startDate, endDate)\n# Aggregate 2016 collection to single image of global fishing effort\neffort_2016 = effort_all.sum()\n# Sum bands to get total effort across gear types\neffort_all_2016 = effort_2016.reduce(ee.Reducer.sum())\n# Mask out pixels with no effort\neffort_all_2016 = effort_all_2016.mask(effort_all_2016.gt(0))\n# // Import the WDPA FeatureCollection and select marine protected areas\nwdpa = ee.FeatureCollection('WCMC/WDPA/current/polygons')\n", "functions": ["wdpa.filterMetadata", "effort_all_2016.clip", "pipa.geometry", "ee.Geometry.Rectangle"], "external_vars": ["effort_all_2016", "wdpa", "ee"], "defined_vars": ["pipa_effort_2016", "pipa", "bounds"], "parameters": ["WDPAID", "equals", 220201, "EPSG:4326", false, "pipa.geometry()", "[-179.999, -90, 180, 90]"], "libraries": ["import geemap", "import ee"]}
