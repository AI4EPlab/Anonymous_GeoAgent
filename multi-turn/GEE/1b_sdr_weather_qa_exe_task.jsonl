{"code": "import ee\nee.Initialize()\nimport geemap\nMap = geemap.Map()\n", "task": "Import the Earth Engine library (**ee**) and initialize it. Then, import the **geemap** library and define a variable named **Map** using the geemap.Map() function.", "exec_path": "GEE", "context": "", "functions": ["ee.Initialize", "geemap.Map"], "external_vars": ["geemap", "ee"], "defined_vars": ["Map"], "parameters": [], "libraries": ["import geemap", "import ee"]}
{"code": "# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection(\"projects/neon-prod-earthengine/assets/DP3-30006-001\").filterDate('2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n", "task": "Using the Earth Engine library (ee), define a variable named `soapSDR` that represents the first image in the `DP3-30006-001` collection, filtered to include only data from 2019 and specifically from the \"SOAP\" site. ", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["unknown_function.first", "unknown_function.filterMetadata", "unknown_function.filterDate", "ee.ImageCollection"], "external_vars": ["ee"], "defined_vars": ["soapSDR"], "parameters": ["NEON_SITE", "equals", "SOAP", "2019-01-01", "2019-12-31", "projects/neon-prod-earthengine/assets/DP3-30006-001"], "libraries": ["import geemap", "import ee"]}
{"code": "# Print the SDR data to the console\nprint('SOAP 2019 SDR',soapSDR)\n", "task": "Print the string \"SOAP 2019 SDR\" followed by the value of the variable `soapSDR`. You will need to define the variable `soapSDR` before running this code.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n", "functions": ["print"], "external_vars": ["print", "soapSDR"], "defined_vars": [], "parameters": ["SOAP 2019 SDR", "soapSDR"], "libraries": ["import geemap", "import ee"]}
{"code": "# Pull out and display only the qa bands (these all start with something other than B)\n# '[^B].*' is a regular expression to pull out bands that don't start with B\nsoapSDR_qa = soapSDR.select('[^B].*')\nprint('QA Bands',soapSDR_qa)\n", "task": "Using the `soapSDR` object, select all elements that do not start with the letter \"B\" and store the result in a variable called `soapSDR_qa`. Then, print the string \"QA Bands\" followed by the value of `soapSDR_qa`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n", "functions": ["soapSDR.select", "print"], "external_vars": ["print", "soapSDR"], "defined_vars": ["soapSDR_qa"], "parameters": ["[^B].*", "QA Bands", "soapSDR_qa"], "libraries": ["import geemap", "import ee"]}
{"code": "# Extract a single band Weather Quality QA layer\nsoapWeather = soapSDR.select(['Weather_Quality_Indicator'])\n", "task": "Using the provided variable `soapSDR`, select the data associated with the attribute `Weather_Quality_Indicator` and store it in a new variable called `soapWeather`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n", "functions": ["soapSDR.select"], "external_vars": ["soapSDR"], "defined_vars": ["soapWeather"], "parameters": ["['Weather_Quality_Indicator']"], "libraries": ["import geemap", "import ee"]}
{"code": "# Select only the clear weather data (<10% cloud cover)\nsoapClearWeather = soapWeather.eq(1)#/ 1 = 0-10% cloud cover\n", "task": "Define a variable called `soapClearWeather` that is set to `True` if the value of the variable `soapWeather` is equal to 1, and `False` otherwise.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n# Extract a single band Weather Quality QA layer\nsoapWeather = soapSDR.select(['Weather_Quality_Indicator'])\n", "functions": ["soapWeather.eq"], "external_vars": ["soapWeather"], "defined_vars": ["soapClearWeather"], "parameters": [1], "libraries": ["import geemap", "import ee"]}
{"code": "# Mask out all cloudy pixels from the SDR image\nsoapSDR_clear = soapSDR.updateMask(soapClearWeather)\n", "task": "Define a new variable called `soapSDR_clear` and assign it the result of calling the `updateMask` method on the `soapSDR` object, passing in the `soapClearWeather` variable as an argument.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n# Extract a single band Weather Quality QA layer\nsoapWeather = soapSDR.select(['Weather_Quality_Indicator'])\n# Select only the clear weather data (<10% cloud cover)\nsoapClearWeather = soapWeather.eq(1)\n", "functions": ["soapSDR.updateMask"], "external_vars": ["soapClearWeather", "soapSDR"], "defined_vars": ["soapSDR_clear"], "parameters": ["soapClearWeather"], "libraries": ["import geemap", "import ee"]}
{"code": "# Create a 3-band true color cloud-free image \nsoapSDR_RGB = soapSDR_clear.select(['B053', 'B035', 'B019'])\n", "task": "Using the existing variable `soapSDR_clear`, define a new variable called `soapSDR_RGB` by selecting elements with indices `B053`, `B035`, and `B019` from `soapSDR_clear`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n# Extract a single band Weather Quality QA layer\nsoapWeather = soapSDR.select(['Weather_Quality_Indicator'])\n# Select only the clear weather data (<10% cloud cover)\nsoapClearWeather = soapWeather.eq(1)\n# Mask out all cloudy pixels from the SDR image\nsoapSDR_clear = soapSDR.updateMask(soapClearWeather)\n", "functions": ["soapSDR_clear.select"], "external_vars": ["soapSDR_clear"], "defined_vars": ["soapSDR_RGB"], "parameters": ["['B053', 'B035', 'B019']"], "libraries": ["import geemap", "import ee"]}
{"code": "# center the map at the lat / lon of the site, set zoom to 12\nMap.setCenter(-119.25, 37.06, 11)\n", "task": "Set the center of the map to the coordinates (-119.25, 37.06) and zoom level to 11. You must first define a map object named \"Map\" and initialize it with the necessary library before running this instruction.", "exec_path": "GEE", "context": "import geemap\nMap = geemap.Map()\n", "functions": ["Map.setCenter"], "external_vars": ["Map"], "defined_vars": [], "parameters": [37.06, 11, "-119.25"], "libraries": ["import geemap"]}
{"code": "# Define a palette for the weather - to match NEON AOP's weather color conventions\ngyrPalette = [\n  '00ff00', # green (<10% cloud cover)\n  'ffff00', # yellow (10-50% cloud cover)\n  'ff0000' # red (>50% cloud cover)\n]\n", "task": "Define a variable called `gyrPalette` and assign it a list containing the hex color codes `'00ff00'`, `'ffff00'`, and `'ff0000'`.", "exec_path": "GEE", "context": "", "functions": [], "external_vars": [], "defined_vars": ["gyrPalette"], "parameters": [], "libraries": []}
{"code": "# Extract acquisition dates and map, don't display layer by default\nsoapDates = soapSDR.select(['Acquisition_Date'])\n", "task": "Using the `soapSDR` DataFrame, select the column named \"Acquisition_Date\" and assign it to a new variable named `soapDates`.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\n", "functions": ["soapSDR.select"], "external_vars": ["soapSDR"], "defined_vars": ["soapDates"], "parameters": ["['Acquisition_Date']"], "libraries": ["import geemap", "import ee"]}
{"code": "# Get the minimum and maximum values of the soapDates band\nminMaxValues = soapDates.reduceRegion(reducer=ee.Reducer.minMax(),maxPixels=1e10)\nprint('min and max dates', minMaxValues)\n\n\n", "task": "Using the Earth Engine library (`ee`), find the minimum and maximum dates within the `soapDates` image collection and print them. Define a variable called `minMaxValues` to store the result.", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Filter image collection by date, site, and visit number (last is optional)\nsoapSDR = ee.ImageCollection('projects/neon-prod-earthengine/assets/DP3-30006-001').filterDate(\n    '2019-01-01', '2019-12-31').filterMetadata('NEON_SITE', 'equals', 'SOAP').first()\nsoapDates = soapSDR.select(['Acquisition_Date'])\n", "functions": ["soapDates.reduceRegion", "ee.Reducer.minMax", "print"], "external_vars": ["soapDates", "print", "ee"], "defined_vars": ["minMaxValues"], "parameters": ["min and max dates", "minMaxValues"], "libraries": ["import geemap", "import ee"]}
