{"code": "import ee\nee.Initialize()\nimport geemap\nMap = geemap.Map()\n", "task": "Import the Earth Engine and geemap libraries, initialize Earth Engine, and create a geemap Map object named \"Map\".", "exec_path": "GEE", "context": "", "functions": ["ee.Initialize", "geemap.Map"], "external_vars": ["geemap", "ee"], "defined_vars": ["Map"], "parameters": [], "libraries": ["import geemap", "import ee"]}
{"code": "#Step 01 : Import NAIP imagery\n#Step 02: Import addison_county\nnaip = ee.ImageCollection(\"USDA/NAIP/DOQQ\")\ngeometry = ee.FeatureCollection(\"users/geogenvs150/VERMONT/addison_county\")\nlandforms = ee.Image(\"CSP/ERGo/1_0/US/landforms\")\n", "task": "Using the ee library, define the following variables:\\n\\n* **naip**: An ImageCollection from the USDA/NAIP/DOQQ dataset\\n* **geometry**: A FeatureCollection representing the Addison County, Vermont region from the `users/geogenvs150/VERMONT` folder\\n* **landforms**: An Image representing US landforms from the CSP/ERGo/1_0/US dataset", "exec_path": "GEE", "context": "import geemap\nimport ee\n", "functions": ["ee.ImageCollection", "ee.FeatureCollection", "ee.Image"], "external_vars": ["ee"], "defined_vars": ["naip", "geometry", "landforms"], "parameters": ["USDA/NAIP/DOQQ", "users/geogenvs150/VERMONT/addison_county", "CSP/ERGo/1_0/US/landforms"], "libraries": ["import geemap", "import ee"]}
{"code": "#Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\nprint('NAIP in Midd', naipMidd.sort('system:time_start', False))\n", "task": "Filter the `naip` dataset using the `geometry` bounds and store the result in a new variable called `naipMidd`. Then, sort the filtered dataset in descending order based on the `system:time_start` property and print the sorted dataset with the label \"NAIP in Midd\".", "exec_path": "GEE", "context": "import geemap\nimport ee\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n", "functions": ["naip.filterBounds", "print", "naipMidd.sort"], "external_vars": ["naip", "geometry", "print"], "defined_vars": ["naipMidd"], "parameters": ["geometry", "NAIP in Midd", "system:time_start", false, "naipMidd.sort('system:time_start', False)"], "libraries": ["import geemap", "import ee"]}
{"code": "#Step 04: Get a list of the years of NAIP imagery for region \n#add year property to each image\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year':imageYear, 'bands':bandNames})\n", "task": "Define a function called `addYear` that takes an image object as input. The function should extract the year from the image's date and the number of bands from the image's band names. Then, update the image object by setting its `year` attribute to the extracted year and its `bands` attribute to the number of bands.  Return the updated image object. Ensure the following variables are defined: `image`, `imageYear`, `bandNames`.", "exec_path": "GEE", "context": "", "functions": ["unknown_function.get", "image.date", "unknown_function.length", "image.bandNames", "image.set"], "external_vars": [], "defined_vars": ["image", "bandNames", "imageYear"], "parameters": ["year", "{'year': imageYear, 'bands': bandNames}"], "libraries": []}
{"code": "naipMiddWithYears = naipMidd.map(addYear)\nprint('add years', naipMiddWithYears)\n", "task": "Using the `naipMidd` variable and the `addYear` function, create a new variable named `naipMiddWithYears` by applying the `map` function to `naipMidd`. Then, use the `print` function to display the string \"add years\" followed by the contents of the `naipMiddWithYears` variable.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n", "functions": ["naipMidd.map", "print"], "external_vars": ["addYear", "naipMidd", "print"], "defined_vars": ["naipMiddWithYears"], "parameters": ["addYear", "add years", "naipMiddWithYears"], "libraries": ["import geemap", "import ee"]}
{"code": "#create a sorted list of distinct years\nyes = ee.List(naipMiddWithYears.aggregate_array('year')).distinct().sort()\nprint('yes', yes)\n", "task": "Using the Earth Engine library (`ee`), create a list named `yes` that contains the distinct sorted years from the `naipMiddWithYears` feature collection. Print the list `yes` using the `print` function.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n", "functions": ["unknown_function.sort", "unknown_function.distinct", "ee.List", "naipMiddWithYears.aggregate_array", "print"], "external_vars": ["naipMiddWithYears", "print", "ee"], "defined_vars": ["yes"], "parameters": ["year", "yes", "yes", "naipMiddWithYears.aggregate_array('year')"], "libraries": ["import geemap", "import ee"]}
{"code": "#filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\nprint('four bands', naipFourBands)\n", "task": "Use the **ee** library and the **naipMiddWithYears** variable to filter out all images with less than 3 bands and store them in a new variable called **naipFourBands**. Then, use the **print** function to print the string \"four bands\" followed by the **naipFourBands** variable.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n", "functions": ["naipMiddWithYears.filter", "ee.Filter.gt", "print"], "external_vars": ["naipMiddWithYears", "print", "ee"], "defined_vars": ["naipFourBands"], "parameters": ["bands", 3, "four bands", "naipFourBands", "ee.Filter.gt('bands', 3)"], "libraries": ["import geemap", "import ee"]}
{"code": "#create a sorted list of distinct years with four bands\nfourBandsList = ee.List(naipFourBands.aggregate_array('year')).distinct().sort()\n", "task": "Using the Earth Engine library (ee) and the variable `naipFourBands`, create a list called `fourBandsList` that contains the distinct years present in the `naipFourBands` image collection, sorted in ascending order.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n# filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\n", "functions": ["unknown_function.sort", "unknown_function.distinct", "ee.List", "naipFourBands.aggregate_array"], "external_vars": ["ee", "naipFourBands"], "defined_vars": ["fourBandsList"], "parameters": ["year", "naipFourBands.aggregate_array('year')"], "libraries": ["import geemap", "import ee"]}
{"code": "#Function for NDVI\ndef addNDVI(image):\n    ndvi = image.normalizedDifference(['N', 'R']).rename('NDVI')\n    return image.addBands(ndvi)\n", "task": "Define a function called `addNDVI` that takes an image as input and returns the image with an added NDVI band. The function should calculate the NDVI using the normalized difference between the near-infrared (N) and red (R) bands. You can assume that the `image` and `ndvi` variables are already defined.", "exec_path": "GEE", "context": "", "functions": ["unknown_function.rename", "image.normalizedDifference", "image.addBands"], "external_vars": [], "defined_vars": ["image", "ndvi"], "parameters": ["NDVI", "ndvi", "['N', 'R']"], "libraries": []}
{"code": "# Apply the addNDVI function on the collection\nwithNDVI = naipFourBands.map(addNDVI)\n", "task": "Using the `addNDVI` function, calculate the NDVI for each pixel in the `naipFourBands` image. Store the result in a new variable called `withNDVI`.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n# filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\n# Function for NDVI\n\n\ndef addNDVI(image):\n    ndvi = image.normalizedDifference(['N', 'R']).rename('NDVI')\n    return image.addBands(ndvi)\n", "functions": ["naipFourBands.map"], "external_vars": ["addNDVI", "naipFourBands"], "defined_vars": ["withNDVI"], "parameters": ["addNDVI"], "libraries": ["import geemap", "import ee"]}
{"code": "# Reduce to the max of the collection\nmaxNAIP = withNDVI.reduce(ee.Reducer.max())\n", "task": "Using the Earth Engine library (`ee`) and the image `withNDVI`, calculate the maximum value of the NDVI across all pixels and store it in a variable named `maxNAIP`.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n# filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\n# Function for NDVI\n\n\ndef addNDVI(image):\n    ndvi = image.normalizedDifference(['N', 'R']).rename('NDVI')\n    return image.addBands(ndvi)\n\n\n# Apply the addNDVI function on the collection\nwithNDVI = naipFourBands.map(addNDVI)\n", "functions": ["withNDVI.reduce", "ee.Reducer.max"], "external_vars": ["withNDVI", "ee"], "defined_vars": ["maxNAIP"], "parameters": ["ee.Reducer.max()"], "libraries": ["import geemap", "import ee"]}
{"code": "#Make a mosaic for 2008\nfy2008 = 2008\nyear2008 = naipFourBands.filter(ee.Filter.calendarRange(fy2008, fy2008, 'year')).mosaic().set({'year':fy2008})\n", "task": "Using the `ee` and `naipFourBands` external variables, filter the `naipFourBands` image collection for the year 2008, mosaic the results, and set the `year` property to 2008.  Define the variables `fy2008` and `year2008` to store the filtered and mosaicked image respectively.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n# filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\n", "functions": ["unknown_function.set", "unknown_function.mosaic", "naipFourBands.filter", "ee.Filter.calendarRange"], "external_vars": ["naipFourBands", "ee"], "defined_vars": ["fy2008", "year2008"], "parameters": ["fy2008", "fy2008", "year", "{'year': fy2008}", "ee.Filter.calendarRange(fy2008, fy2008, 'year')"], "libraries": ["import geemap", "import ee"]}
{"code": "#Make a mosaic for 2017\nfy2014 = 2014\nyear2014 = naipFourBands.filter(ee.Filter.calendarRange(fy2014, fy2014, 'year')).mosaic().set({'year':fy2014})\n", "task": "Using the Earth Engine library (ee) and a pre-defined image collection called \"naipFourBands\", create a variable called \"year2014\" that represents a mosaic of the NAIP imagery for the year 2014. First, define the variable \"fy2014\" as 2014. Then, use the `filter` method to select images from the \"naipFourBands\" collection that fall within the year 2014. Use the `calendarRange` filter method to specify the year. Finally, create a mosaic of the filtered images using the `mosaic` method and set a property called \"year\" with the value of \"fy2014\" using the `set` method.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n# filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\n", "functions": ["unknown_function.set", "unknown_function.mosaic", "naipFourBands.filter", "ee.Filter.calendarRange"], "external_vars": ["naipFourBands", "ee"], "defined_vars": ["fy2014", "year2014"], "parameters": ["fy2014", "fy2014", "year", "{'year': fy2014}", "ee.Filter.calendarRange(fy2014, fy2014, 'year')"], "libraries": ["import geemap", "import ee"]}
{"code": "# Make a handy variable of visualization parameters.\nNC = {'bands': ['R', 'G', 'B'], 'gamma': 1.2}\nFC = {'bands': ['N', 'R', 'G'], 'gamma': 1.2}\n", "task": "Define two dictionaries named `NC` and `FC` with the following values: \\n\\n`NC` should have a `bands` key with a value of `['R', 'G', 'B']` and a `gamma` key with a value of `1.2`.\\n\\n`FC` should have a `bands` key with a value of `['N', 'R', 'G']` and a `gamma` key with a value of `1.2`.", "exec_path": "GEE", "context": "", "functions": [], "external_vars": [], "defined_vars": ["FC", "NC"], "parameters": [], "libraries": []}
{"code": "#reclassify ndvi lte 0\nreclassNDVI = maxNAIP.select('NDVI_max').gte(0)\n", "task": "Create a new image called **reclassNDVI** by selecting the 'NDVI_max' band from the **maxNAIP** image and setting all pixels with a value greater than or equal to 0 to 1.", "exec_path": "GEE", "context": "import geemap\nimport ee\nMap = geemap.Map()\n# Step 02: Import addison_county\nnaip = ee.ImageCollection('USDA/NAIP/DOQQ')\ngeometry = ee.FeatureCollection('users/geogenvs150/VERMONT/addison_county')\n# Step 03: Filter NAIP by rectangle and sort by date of acquisition\nnaipMidd = naip.filterBounds(geometry)\n# add year property to each image\n\n\ndef addYear(image):\n    imageYear = image.date().get('year')\n    bandNames = image.bandNames().length()\n    return image.set({'year': imageYear, 'bands': bandNames})\n\n\nnaipMiddWithYears = naipMidd.map(addYear)\n# filter images with more than three bands and then print out list\nnaipFourBands = naipMiddWithYears.filter(ee.Filter.gt('bands', 3))\n# Function for NDVI\n\n\ndef addNDVI(image):\n    ndvi = image.normalizedDifference(['N', 'R']).rename('NDVI')\n    return image.addBands(ndvi)\n\n\n# Apply the addNDVI function on the collection\nwithNDVI = naipFourBands.map(addNDVI)\n# Reduce to the max of the collection\nmaxNAIP = withNDVI.reduce(ee.Reducer.max())\n", "functions": ["unknown_function.gte", "maxNAIP.select"], "external_vars": ["maxNAIP"], "defined_vars": ["reclassNDVI"], "parameters": [0, "NDVI_max"], "libraries": ["import geemap", "import ee"]}
{"code": "#Working with NED landforms\nlandformsVis = {\n  min: 11.0,\n  max: 42.0,\n  'palette': [\n    '141414', '383838', '808080', 'EBEB8F', 'F7D311', 'AA0000', 'D89382',\n    'DDC9C9', 'DCCDCE', '1C6330', '68AA63', 'B5C98E', 'E1F0E5', 'a975ba',\n    '6f198c'\n  ],\n}\n\n\n", "task": "Define a variable named `landformsVis` that contains a dictionary with keys `min`, `max`, and `palette`. The `min` key should have the value `11.0`, the `max` key should have the value `42.0`, and the `palette` key should have the value of a list containing the following hex color values: `['141414', '383838', '808080', 'EBEB8F', 'F7D311', 'AA0000', 'D89382', 'DDC9C9', 'DCCDCE', '1C6330', '68AA63', 'B5C98E', 'E1F0E5', 'a975ba', '6f198c']`", "exec_path": "GEE", "context": "", "functions": [], "external_vars": ["min", "max"], "defined_vars": ["landformsVis"], "parameters": [], "libraries": []}
