{"code": "\nimport gemgis as gg\nfile_path ='data/24_plotting_hypocenters_of_earthquakes/'\n", "task": "Import the gemgis library as gg and define the file path variable named \"file_path\". [file_path] should be a string representing the directory path.", "exec_path": "gemgis-main", "context": "", "functions": [], "external_vars": [], "defined_vars": ["file_path"], "parameters": [], "libraries": ["import gemgis as gg"]}
{"code": "\ngg.download_gemgis_data.download_tutorial_data(filename=\"24_plotting_hypocenters_of_earthquakes.zip\", dirpath=file_path)\n", "task": "Download the tutorial data for plotting hypocenters of earthquakes from the GEMGIS database and save it to the specified directory. The data is stored in a zip file named \"24_plotting_hypocenters_of_earthquakes.zip\".", "exec_path": "gemgis-main", "context": "import gemgis as gg\nfile_path = 'data/24_plotting_hypocenters_of_earthquakes/'\n", "functions": ["gg.download_gemgis_data.download_tutorial_data"], "external_vars": ["gg", "file_path"], "defined_vars": [], "parameters": [], "libraries": ["import gemgis as gg"]}
{"code": "\n# ## Load Earthquake Data\nimport gemgis as gg\nimport pandas as pd\ndata = pd.read_csv(file_path + 'earthquakes_aachen.csv', delimiter=';').dropna()\ndata.head(15)\ndata = data[data['Magnitude'] != '-']\ndata = data[data['Tiefe [km]'] != '-']\ndata.head(10)\ndata['Magnitude'] = pd.to_numeric(data['Magnitude'])\ndata['Tiefe [km]'] = pd.to_numeric(data['Tiefe [km]'])\ndata['Date'] = pd.to_datetime(data['Date'])\ndata['Year'] = pd.DatetimeIndex(data['Date']).year\n\ndata['X'] = pd.to_numeric(data['X'])\ndata['Y'] = pd.to_numeric(data['Y'])\ndata['Z'] = pd.to_numeric(data['Z'])\n", "task": "Use the pandas library, `pd`, to read a CSV file named \"earthquakes_aachen.csv\" located at `file_path`  and store it in a Pandas DataFrame called `data`. Drop all rows with missing values. Preview the first 15 rows of the DataFrame. Remove rows where \"Magnitude\" and \"Tiefe [km]\" are equal to \"-\". Preview the first 10 rows of the DataFrame. Convert the following columns to numeric: \"Magnitude\", \"Tiefe [km]\", \"X\", \"Y\", \"Z\". Convert the \"Date\" column to a datetime format and create a new column named \"Year\" containing the year from the \"Date\" column. ", "exec_path": "gemgis-main", "context": "import geopandas as gpd\nfile_path = 'data/24_plotting_hypocenters_of_earthquakes/'\n", "functions": ["unknown_function.dropna", "pd.read_csv", "data.head", "data.head", "pd.to_numeric", "pd.to_numeric", "pd.to_datetime", "pd.DatetimeIndex", "pd.to_numeric", "pd.to_numeric", "pd.to_numeric"], "external_vars": ["pd", "file_path"], "defined_vars": ["data"], "parameters": [15, 10, "file_path + 'earthquakes_aachen.csv'", "data['Magnitude']", "data['Tiefe [km]']", "data['Date']", "data['Date']", "data['X']", "data['Y']", "data['Z']"], "libraries": ["import geopandas as gpd", "import pandas as pd", "import gemgis as gg"]}
{"code": "\nimport geopandas as gpd\ngdf = gpd.read_file(filename= file_path+'earthquake_data.shp')\n", "task": "Import the geopandas library as \"gpd\" and read the earthquake data from the shapefile located at \"file_path + \\'earthquake_data.shp\\'\" into a GeoDataFrame named \"gdf\".", "exec_path": "gemgis-main", "context": "file_path = 'data/24_plotting_hypocenters_of_earthquakes/'\n", "functions": ["gpd.read_file"], "external_vars": ["gpd", "file_path"], "defined_vars": ["gdf"], "parameters": [], "libraries": ["import geopandas as gpd"]}
{"code": "\ngdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.X, data.Y), crs='EPSG:4326').to_crs('EPSG:4647').reset_index()\ngdf = gg.vector.extract_xy(gdf=gdf, reset_index=True)\ngdf.head()\ngdf.drop('Date', axis=1).to_file(file_path + 'earthquake_data.shp')\n", "task": "Create a GeoDataFrame called \"gdf\" from the \"data\" DataFrame using the \"gpd\" library. The geometry should be defined using points from the \"X\" and \"Y\" columns in \"data\". Set the coordinate reference system (CRS) to \"EPSG:4326\", then reproject to \"EPSG:4647\" and reset the index.  Next, use the \"gg\" library to extract the X and Y coordinates from \"gdf\" and reset the index. Print the first few rows of \"gdf\". Finally, drop the \"Date\" column from \"gdf\" and save the resulting GeoDataFrame as a shapefile named \"earthquake_data.shp\" in the directory specified by the \"file_path\" variable.", "exec_path": "gemgis-main", "context": "import geopandas as gpd\nimport pandas as pd\nimport gemgis as gg\nfile_path = 'data/24_plotting_hypocenters_of_earthquakes/'\ndata = pd.read_csv(file_path + 'earthquakes_aachen.csv',\n                   delimiter=';').dropna()\ndata = data[data['Magnitude'] != '-']\ndata = data[data['Tiefe [km]'] != '-']\n", "functions": ["unknown_function.reset_index", "unknown_function.to_crs", "gpd.GeoDataFrame", "gpd.points_from_xy", "gg.vector.extract_xy", "gdf.head", "unknown_function.to_file", "gdf.drop"], "external_vars": ["gg", "data", "gpd", "file_path"], "defined_vars": ["gdf"], "parameters": ["EPSG:4647", "data", "Date", "data.X", "data.Y", "file_path + 'earthquake_data.shp'"], "libraries": ["import geopandas as gpd", "import pandas as pd", "import gemgis as gg"]}
{"code": "\nwms = gg.web.load_wms(url='https://ows.terrestris.de/osm/service?')\n", "task": "Using the `gg` library, load a Web Map Service (WMS) from the URL \"https://ows.terrestris.de/osm/service?\" and store it in the variable `wms`.", "exec_path": "gemgis-main", "context": "import gemgis as gg\n", "functions": ["gg.web.load_wms"], "external_vars": ["gg"], "defined_vars": ["wms"], "parameters": [], "libraries": ["import gemgis as gg"]}
{"code": "\nwms_map = gg.web.load_as_array(url=wms.url,\n                               layer='OSM-WMS', \n                               style='default', \n                               crs='EPSG:4647', \n                               bbox=[32286000,32328000, 5620000,5648000],\n                               size=[4200, 2800], \n                               filetype='image/png')\n", "task": "Using the `gg.web.load_as_array` function from the `gg` library, load a WMS map from the URL specified in the `wms.url` variable. Define the `wms_map` variable with the loaded data. Set the following parameters: layer='OSM-WMS', style='default', crs='EPSG:4647', bbox=[32286000, 32328000, 5620000, 5648000], size=[4200, 2800], filetype='image/png'.", "exec_path": "gemgis-main", "context": "import gemgis as gg\nwms = gg.web.load_wms(url='https://ows.terrestris.de/osm/service?')\n", "functions": ["gg.web.load_as_array"], "external_vars": ["gg", "wms"], "defined_vars": ["wms_map"], "parameters": [], "libraries": ["import gemgis as gg"]}
{"code": "\n# ## Plotting the data\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1,1, figsize=(20,20))\nax.imshow(wms_map, extent=[32286000,32328000, 5620000,5648000])\ngdf.plot(ax=ax, aspect='equal', column='Magnitude', cmap='Reds', markersize = gdf['Tiefe [km]'].values*10)\n\n\n", "task": "Using the provided `wms_map`, `gdf`, and `plt` variables, create a Matplotlib plot. Define variables `fig` and `ax` as a figure and axes object respectively, using `plt.subplots` with a figure size of (20, 20). Display `wms_map` on the axes using `ax.imshow` with the specified extent. Plot the `gdf` GeoDataFrame on the same axes using `gdf.plot` with `aspect='equal'`, `column='Magnitude'`, `cmap='Reds'`, and a marker size proportional to the values in the \"Tiefe [km]\" column multiplied by 10.", "exec_path": "gemgis-main", "context": "import geopandas as gpd\nimport pandas as pd\nimport gemgis as gg\nfile_path = 'data/24_plotting_hypocenters_of_earthquakes/'\ndata = pd.read_csv(file_path + 'earthquakes_aachen.csv',\n                   delimiter=';').dropna()\ndata = data[data['Magnitude'] != '-']\ndata = data[data['Tiefe [km]'] != '-']\ngdf = gpd.read_file(filename=file_path + 'earthquake_data.shp')\ngdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(\n    data.X, data.Y), crs='EPSG:4326').to_crs('EPSG:4647').reset_index()\ngdf = gg.vector.extract_xy(gdf=gdf, reset_index=True)\nwms = gg.web.load_wms(url='https://ows.terrestris.de/osm/service?')\nwms_map = gg.web.load_as_array(url=wms.url, layer='OSM-WMS', style='default', crs='EPSG:4647', bbox=[\n                               32286000, 32328000, 5620000, 5648000], size=[4200, 2800], filetype='image/png')\n", "functions": ["plt.subplots", "ax.imshow", "gdf.plot"], "external_vars": ["wms_map", "plt", "gdf"], "defined_vars": ["ax", "fig"], "parameters": [1, 1, "wms_map"], "libraries": ["import geopandas as gpd", "import pandas as pd", "import matplotlib.pyplot as plt", "import gemgis as gg"]}
