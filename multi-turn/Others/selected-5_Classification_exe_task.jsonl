{"code": "\nimport numpy as np\nimport xarray as xr\nimport datashader as ds\nfrom datashader.transfer_functions import shade\nfrom datashader.transfer_functions import stack\nfrom datashader.transfer_functions import dynspread\nfrom datashader.transfer_functions import set_background\nfrom datashader.colors import Elevation\nimport xrspatial\n", "task": "Import necessary libraries for data processing and visualization using datashader. The following variables need to be defined:  [np, xr, ds, shade, stack, dynspread, set_background, Elevation, xrspatial]", "exec_path": "xarray-spatial-master", "context": "from xrspatial.classify import natural_breaks\nfrom datashader.colors import Set1, Set3\nfrom xrspatial import generate_terrain\nfrom xrspatial import hillshade\nfrom xrspatial import quantile\nfrom xrspatial.classify import equal_interval\nfrom xrspatial.zonal import regions\n", "functions": [], "external_vars": [], "defined_vars": [], "parameters": [], "libraries": ["from datashader.transfer_functions import dynspread", "from xrspatial.classify import natural_breaks", "from datashader.colors import Elevation", "from datashader.transfer_functions import set_background", "from datashader.colors import Set1, Set3", "from xrspatial import generate_terrain", "from xrspatial import hillshade", "from datashader.transfer_functions import shade", "from xrspatial import quantile", "import datashader as ds", "from datashader.transfer_functions import stack", "import xrspatial", "from xrspatial.classify import equal_interval", "import xarray as xr", "import numpy as np", "from xrspatial.zonal import regions"]}
{"code": "\n# ## Generate Terrain Data\nfrom xrspatial import generate_terrain\nfrom xrspatial import hillshade\n\nW = 800\nH = 600\n\ntemplate_terrain = xr.DataArray(np.zeros((H, W)))\nx_range=(-20e6, 20e6)\ny_range=(-20e6, 20e6)\n\nterrain = generate_terrain(\n    template_terrain, x_range=x_range, y_range=y_range, seed=1, zfactor=1000\n)\nstack(shade(hillshade(terrain), cmap=['grey', 'white']), shade(terrain, cmap=Elevation, alpha=128))\n", "task": "Generate a terrain with the `generate_terrain` function, using the `xr` and `np` libraries. Define the variables `x_range`, `y_range`, `W`, `template_terrain`, `terrain`, and `H` before running this code. Apply `hillshade` and `shade` to the generated terrain, using the `hillshade` and `shade` functions from the `xrspatial` library.  Use the `cmap` parameter in `shade` with the provided colormaps. Finally, stack the resulting shaded terrains using the `stack` function, combining the two images. ", "exec_path": "xarray-spatial-master", "context": "from datashader.transfer_functions import dynspread\nfrom xrspatial.classify import natural_breaks\nfrom datashader.colors import Elevation\nfrom datashader.transfer_functions import set_background\nfrom datashader.colors import Set1, Set3\nfrom datashader.transfer_functions import shade\nfrom xrspatial import quantile\nimport datashader as ds\nfrom datashader.transfer_functions import stack\nimport xrspatial\nfrom xrspatial.classify import equal_interval\nimport xarray as xr\nimport numpy as np\nfrom xrspatial.zonal import regions\n", "functions": ["xr.DataArray", "np.zeros", "generate_terrain", "stack", "shade", "hillshade", "shade"], "external_vars": ["generate_terrain", "shade", "stack", "np", "Elevation", "xr", "hillshade"], "defined_vars": ["W", "y_range", "x_range", "terrain", "template_terrain", "H"], "parameters": ["template_terrain", "terrain", "terrain", "np.zeros((H, W))", "(H, W)", "shade(hillshade(terrain), cmap=['grey', 'white'])", "shade(terrain, cmap=Elevation, alpha=128)", "hillshade(terrain)"], "libraries": ["from datashader.transfer_functions import dynspread", "from xrspatial.classify import natural_breaks", "from datashader.colors import Elevation", "from datashader.transfer_functions import set_background", "from datashader.colors import Set1, Set3", "from datashader.transfer_functions import shade", "from xrspatial import generate_terrain", "from xrspatial import hillshade", "from xrspatial import quantile", "import datashader as ds", "from datashader.transfer_functions import stack", "import xrspatial", "from xrspatial.classify import equal_interval", "import xarray as xr", "import numpy as np", "from xrspatial.zonal import regions"]}
{"code": "\n# ## Reclassify\nfrom xrspatial import hillshade\nfrom xrspatial import quantile\n\nqcut_agg = quantile(terrain, k=15)\n\nstack(shade(hillshade(qcut_agg), cmap=['gray', 'white'], alpha=255, how='linear'),\n      shade(qcut_agg,     cmap=Elevation,         alpha=128, how='linear'))\n", "task": "Use the `quantile` function from `xrspatial` to create a quantile classification of the `terrain` variable with 15 classes, storing the result in the variable `qcut_agg`.  Then, using the `hillshade` function, create a hillshade image from `qcut_agg`. Next, use the `shade` function to apply a grayscale colormap to the hillshade image, setting the alpha value to 255 and using linear interpolation.  Finally, use the `shade` function again, this time applying the `Elevation` colormap to the `qcut_agg` variable, setting the alpha value to 128 and using linear interpolation. Use the `stack` function to combine the two images, displaying them side-by-side.", "exec_path": "xarray-spatial-master", "context": "from datashader.transfer_functions import dynspread\nfrom xrspatial.classify import natural_breaks\nfrom datashader.colors import Elevation\nfrom datashader.transfer_functions import set_background\nfrom datashader.colors import Set1, Set3\nfrom datashader.transfer_functions import shade\nfrom xrspatial import generate_terrain\nimport datashader as ds\nfrom datashader.transfer_functions import stack\nimport xrspatial\nfrom xrspatial.classify import equal_interval\nimport xarray as xr\nimport numpy as np\nfrom xrspatial.zonal import regions\nW = 800\nH = 600\ntemplate_terrain = xr.DataArray(np.zeros((H, W)))\nx_range = (-20000000.0, 20000000.0)\ny_range = (-20000000.0, 20000000.0)\nterrain = generate_terrain(\n    template_terrain, x_range=x_range, y_range=y_range, seed=1, zfactor=1000)\n", "functions": ["quantile", "stack", "shade", "hillshade", "shade"], "external_vars": ["shade", "stack", "quantile", "Elevation", "terrain", "hillshade"], "defined_vars": ["qcut_agg"], "parameters": ["terrain", "qcut_agg", "qcut_agg", "shade(hillshade(qcut_agg), cmap=['gray', 'white'], alpha=255, how='linear')", "shade(qcut_agg, cmap=Elevation, alpha=128, how='linear')", "hillshade(qcut_agg)"], "libraries": ["from datashader.transfer_functions import dynspread", "from xrspatial.classify import natural_breaks", "from datashader.colors import Elevation", "from datashader.transfer_functions import set_background", "from datashader.colors import Set1, Set3", "from datashader.transfer_functions import shade", "from xrspatial import generate_terrain", "from xrspatial import hillshade", "from xrspatial import quantile", "import datashader as ds", "from datashader.transfer_functions import stack", "import xrspatial", "from xrspatial.classify import equal_interval", "import xarray as xr", "import numpy as np", "from xrspatial.zonal import regions"]}
{"code": "\n# ### Equal Interval Reclassify\nfrom xrspatial.classify import equal_interval\nfrom xrspatial import hillshade\nequal_interval_agg = equal_interval(terrain, k=15)\n\nstack(shade(hillshade(equal_interval_agg), cmap=['gray', 'white'], alpha=255, how='linear'),\n      shade(equal_interval_agg, cmap=Elevation, alpha=128, how='linear'))\n", "task": "Using the `equal_interval` function, classify the `terrain` data into 15 equal intervals. Store the result in a variable called `equal_interval_agg`. Then, create a hillshade of the classified terrain using the `hillshade` function.  Use the `shade` function to create a shaded relief image from the hillshade. Set the colormap to `['gray', 'white']`, the alpha value to 255, and the `how` parameter to `'linear'`.  Additionally, create a shaded relief image using the `shade` function on the `equal_interval_agg` data. Set the colormap to `Elevation`, the alpha value to 128, and the `how` parameter to `'linear'`. Finally, combine the two shaded relief images using the `stack` function.", "exec_path": "xarray-spatial-master", "context": "from datashader.transfer_functions import dynspread\nfrom xrspatial.classify import natural_breaks\nfrom datashader.colors import Elevation\nfrom datashader.transfer_functions import set_background\nfrom datashader.colors import Set1, Set3\nfrom datashader.transfer_functions import shade\nfrom xrspatial import generate_terrain\nfrom xrspatial import quantile\nimport datashader as ds\nfrom datashader.transfer_functions import stack\nimport xrspatial\nimport xarray as xr\nimport numpy as np\nfrom xrspatial.zonal import regions\nW = 800\nH = 600\ntemplate_terrain = xr.DataArray(np.zeros((H, W)))\nx_range = (-20000000.0, 20000000.0)\ny_range = (-20000000.0, 20000000.0)\nterrain = generate_terrain(\n    template_terrain, x_range=x_range, y_range=y_range, seed=1, zfactor=1000)\n", "functions": ["equal_interval", "stack", "shade", "hillshade", "shade"], "external_vars": ["shade", "stack", "equal_interval", "Elevation", "terrain", "hillshade"], "defined_vars": ["equal_interval_agg"], "parameters": ["terrain", "equal_interval_agg", "equal_interval_agg", "shade(hillshade(equal_interval_agg), cmap=['gray', 'white'], alpha=255, how='linear')", "shade(equal_interval_agg, cmap=Elevation, alpha=128, how='linear')", "hillshade(equal_interval_agg)"], "libraries": ["from datashader.transfer_functions import dynspread", "from xrspatial.classify import natural_breaks", "from datashader.colors import Elevation", "from datashader.transfer_functions import set_background", "from datashader.colors import Set1, Set3", "from datashader.transfer_functions import shade", "from xrspatial import generate_terrain", "from xrspatial import hillshade", "from xrspatial import quantile", "import datashader as ds", "from datashader.transfer_functions import stack", "import xrspatial", "from xrspatial.classify import equal_interval", "import xarray as xr", "import numpy as np", "from xrspatial.zonal import regions"]}
{"code": "\n# ### Natural Breaks (Jenks) Reclassify\nfrom xrspatial.classify import natural_breaks\nfrom xrspatial import hillshade\nnatural_breaks_agg = natural_breaks(terrain, num_sample=1000, k=15)\nstack(shade(hillshade(natural_breaks_agg), cmap=['gray', 'white'], alpha=255, how='linear'),\n      shade(natural_breaks_agg, cmap=Elevation, alpha=128, how='linear'))\n", "task": "Use the `natural_breaks` function from the `xrspatial.classify` module to classify the `terrain` variable into 15 classes using 1000 samples. Store the result in the variable `natural_breaks_agg`. Then, use the `hillshade`, `shade`, and `stack` functions to create a stacked image. First, apply `hillshade` to `natural_breaks_agg`, then use `shade` with a grayscale colormap and an alpha value of 255 to create a hillshade image. Second, apply `shade` to `natural_breaks_agg` using the `Elevation` colormap and an alpha value of 128 to create a colored terrain image. Finally, use `stack` to combine the hillshade and terrain images.", "exec_path": "xarray-spatial-master", "context": "from datashader.transfer_functions import dynspread\nfrom datashader.colors import Elevation\nfrom datashader.transfer_functions import set_background\nfrom datashader.colors import Set1, Set3\nfrom datashader.transfer_functions import shade\nfrom xrspatial import generate_terrain\nfrom xrspatial import quantile\nimport datashader as ds\nfrom datashader.transfer_functions import stack\nimport xrspatial\nfrom xrspatial.classify import equal_interval\nimport xarray as xr\nimport numpy as np\nfrom xrspatial.zonal import regions\nW = 800\nH = 600\ntemplate_terrain = xr.DataArray(np.zeros((H, W)))\nx_range = (-20000000.0, 20000000.0)\ny_range = (-20000000.0, 20000000.0)\nterrain = generate_terrain(\n    template_terrain, x_range=x_range, y_range=y_range, seed=1, zfactor=1000)\n", "functions": ["natural_breaks", "stack", "shade", "hillshade", "shade"], "external_vars": ["shade", "stack", "natural_breaks", "Elevation", "terrain", "hillshade"], "defined_vars": ["natural_breaks_agg"], "parameters": ["terrain", "natural_breaks_agg", "natural_breaks_agg", "shade(hillshade(natural_breaks_agg), cmap=['gray', 'white'], alpha=255, how='linear')", "shade(natural_breaks_agg, cmap=Elevation, alpha=128, how='linear')", "hillshade(natural_breaks_agg)"], "libraries": ["from datashader.transfer_functions import dynspread", "from xrspatial.classify import natural_breaks", "from datashader.colors import Elevation", "from datashader.transfer_functions import set_background", "from datashader.colors import Set1, Set3", "from datashader.transfer_functions import shade", "from xrspatial import generate_terrain", "from xrspatial import hillshade", "from xrspatial import quantile", "import datashader as ds", "from datashader.transfer_functions import stack", "import xrspatial", "from xrspatial.classify import equal_interval", "import xarray as xr", "import numpy as np", "from xrspatial.zonal import regions"]}
{"code": "\n# ### Regions: Groupby Pixel-Value Connectivity\nfrom xrspatial.zonal import regions\nfrom xrspatial import hillshade\nfrom datashader.colors import Set1, Set3\nregions_agg = regions(equal_interval_agg, neighborhood=4)\nstack(shade(hillshade(regions_agg), cmap=['gray', 'white'], alpha=255, how='linear'),\n      shade(regions_agg, cmap=Set1, alpha=128, how='eq_hist'))\n\n\n", "task": "Use the `regions` function from `xrspatial.zonal` to create a zonal aggregation of the data using the `equal_interval_agg` function and a neighborhood of 4. Store the result in the variable `regions_agg`. Then, use the `stack` function to combine the results of the following operations: first, shade the hillshade of `regions_agg` with the colors `gray` and `white`, using a linear colormap and an alpha of 255. Second, shade `regions_agg` with the colors from `Set1`, using an equal histogram colormap and an alpha of 128. Use the `hillshade` function from `xrspatial`, the `Set1` palette from `datashader.colors`, and the `shade` function.", "exec_path": "xarray-spatial-master", "context": "from datashader.transfer_functions import dynspread\nfrom xrspatial.classify import natural_breaks\nfrom datashader.colors import Elevation\nfrom datashader.transfer_functions import set_background\nfrom datashader.transfer_functions import shade\nfrom xrspatial import generate_terrain\nfrom xrspatial import quantile\nimport datashader as ds\nfrom datashader.transfer_functions import stack\nimport xrspatial\nfrom xrspatial.classify import equal_interval\nimport xarray as xr\nimport numpy as np\nW = 800\nH = 600\ntemplate_terrain = xr.DataArray(np.zeros((H, W)))\nx_range = (-20000000.0, 20000000.0)\ny_range = (-20000000.0, 20000000.0)\nterrain = generate_terrain(\n    template_terrain, x_range=x_range, y_range=y_range, seed=1, zfactor=1000)\nequal_interval_agg = equal_interval(terrain, k=15)\n", "functions": ["regions", "stack", "shade", "hillshade", "shade"], "external_vars": ["shade", "stack", "equal_interval_agg", "Set1", "regions", "hillshade"], "defined_vars": ["regions_agg"], "parameters": ["equal_interval_agg", "regions_agg", "regions_agg", "shade(hillshade(regions_agg), cmap=['gray', 'white'], alpha=255, how='linear')", "shade(regions_agg, cmap=Set1, alpha=128, how='eq_hist')", "hillshade(regions_agg)"], "libraries": ["from datashader.transfer_functions import dynspread", "from xrspatial.classify import natural_breaks", "from datashader.colors import Elevation", "from datashader.transfer_functions import set_background", "from datashader.colors import Set1, Set3", "from datashader.transfer_functions import shade", "from xrspatial import generate_terrain", "from xrspatial import hillshade", "from xrspatial import quantile", "import datashader as ds", "from datashader.transfer_functions import stack", "import xrspatial", "from xrspatial.classify import equal_interval", "import xarray as xr", "import numpy as np", "from xrspatial.zonal import regions"]}
